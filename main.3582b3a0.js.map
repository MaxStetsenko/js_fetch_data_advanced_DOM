{"version":3,"sources":["scripts/main.js"],"names":["request","endPoint","idElem","format","baseUrl","fetch","then","response","ok","json","Error","API","getIds","data","map","dataEl","id","getFirstReceivedDetails","ids","Promise","race","getAllSuccessfulDetails","allSettled","result","filter","p","status","el","value","getThreeFastestDetails","all","pushResultOnTheScreen","wrapper","elClass","elHeader","container","document","querySelector","block","name","join","insertAdjacentHTML"],"mappings":";AAAA,aAEA,IAAMA,EAAU,WACdC,IAAAA,EAAW,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,UACXC,EAAS,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACTC,EAAS,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,QACTC,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,4DAEHC,OAAAA,MAASD,GAAAA,OAAAA,GAAUH,OAAAA,GAAWC,OAAAA,GAASC,OAAAA,IAC3CG,KAAK,SAAAC,GACA,OAACA,EAASC,GAIPD,EAASE,OAHP,IAAIC,MAAM,yBAOnBC,EAAM,CACVC,OAAOX,SAAAA,GACED,OAAAA,EAAQC,GACZK,KAAK,SAAAO,GACGA,OAAAA,EAAKC,IAAI,SAAAC,GAAUA,OAAAA,EAAOC,QAIvCC,wBAAyB,SAACC,GACjBC,OAAAA,QAAQC,KAAKF,EAAIJ,IAAI,SAAAE,GAAMhB,OAAAA,EAAQ,UAAegB,IAAAA,OAAAA,QAG3DK,wBAAyB,SAACH,GACjBC,OAAAA,QAAQG,WAAWJ,EAAIJ,IAAI,SAAAE,GAAMhB,OAAAA,EAAQ,UAAegB,IAAAA,OAAAA,OAC5DV,KAAK,SAAAiB,GAAUA,OAAAA,EAAOC,OAAO,SAAAC,GAAKA,MAAa,cAAbA,EAAEC,SAClCZ,IAAI,SAAAa,GAAMA,OAAAA,EAAGC,WAGpBC,uBAAwB,SAACX,GAChBC,OAAAA,QAAQW,IACb,CACEX,QAAQC,KAAKF,EAAIJ,IAAI,SAAAE,GAAMhB,OAAAA,EAAQ,UAAegB,IAAAA,OAAAA,OAClDG,QAAQC,KAAKF,EAAIJ,IAAI,SAAAE,GAAMhB,OAAAA,EAAQ,UAAegB,IAAAA,OAAAA,OAClDG,QAAQC,KAAKF,EAAIJ,IAAI,SAAAE,GAAMhB,OAAAA,EAAQ,UAAegB,IAAAA,OAAAA,WA2B1D,SAASe,EAAsBC,EAASC,EAASC,EAAUrB,GACnDsB,IAAAA,EAAYC,SAASC,cAAiBL,GAAAA,OAAAA,IAEtCM,EACSL,oBAAAA,OAAAA,EACsCC,6DAAAA,OAAAA,EAC/CrB,iBAAAA,OAAAA,EAAKC,IAAI,SAAAa,GAAqCA,MAAAA,+BAAAA,OAAAA,EAAGY,KAAcZ,WAAAA,OAAAA,EAAGX,GAAvD,WAAkEwB,OAHnF,mBAOAL,EAAUM,mBAAmB,YAAaH,GA/B5C3B,EAAIC,OAAO,WACRN,KAAK,SAAAO,GAAQF,OAAAA,EAAIM,wBAAwBJ,KACzCP,KAAK,SAAAO,GAAQ,MAAA,CAACA,KACdP,KAAK,SAAAO,GACJkB,EAAsB,OAAQ,iBAAkB,iBAAkBlB,KAGtEF,EAAIC,OAAO,WACRN,KAAK,SAAAO,GAAQF,OAAAA,EAAIU,wBAAwBR,KACzCP,KAAK,SAAAO,GACJkB,EAAsB,OAAQ,iBAAkB,iBAAkBlB,KAGtEF,EAAIC,OAAO,WACRN,KAAK,SAAAO,GAAQF,OAAAA,EAAIkB,uBAAuBhB,KACxCP,KAAK,SAAAO,GACJkB,EACE,OAAQ,iBAAkB,wBAAyBlB","file":"main.3582b3a0.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst request = (\n  endPoint = '/phones',\n  idElem = '',\n  format = '.json',\n  baseUrl = 'https://mate-academy.github.io/phone-catalogue-static/api',\n) => {\n  return fetch(`${baseUrl}${endPoint}${idElem}${format}`)\n    .then(response => {\n      if (!response.ok) {\n        return new Error('Error with request');\n      }\n\n      return response.json();\n    });\n};\n\nconst API = {\n  getIds(endPoint) {\n    return request(endPoint)\n      .then(data => {\n        return data.map(dataEl => dataEl.id);\n      });\n  },\n\n  getFirstReceivedDetails: (ids) => {\n    return Promise.race(ids.map(id => request('/phones', `/${id}`)));\n  },\n\n  getAllSuccessfulDetails: (ids) => {\n    return Promise.allSettled(ids.map(id => request('/phones', `/${id}`)))\n      .then(result => result.filter(p => p.status === 'fulfilled')\n        .map(el => el.value));\n  },\n\n  getThreeFastestDetails: (ids) => {\n    return Promise.all(\n      [\n        Promise.race(ids.map(id => request('/phones', `/${id}`))),\n        Promise.race(ids.map(id => request('/phones', `/${id}`))),\n        Promise.race(ids.map(id => request('/phones', `/${id}`))),\n      ]\n    );\n  },\n};\n\nAPI.getIds('/phones')\n  .then(data => API.getFirstReceivedDetails(data))\n  .then(data => [data])\n  .then(data => {\n    pushResultOnTheScreen('body', 'first-received', 'First Received', data);\n  });\n\nAPI.getIds('/phones')\n  .then(data => API.getAllSuccessfulDetails(data))\n  .then(data => {\n    pushResultOnTheScreen('body', 'all-successful', 'All Successful', data);\n  });\n\nAPI.getIds('/phones')\n  .then(data => API.getThreeFastestDetails(data))\n  .then(data => {\n    pushResultOnTheScreen(\n      'body', 'three-received', 'Three Fastest Details', data\n    );\n  });\n\nfunction pushResultOnTheScreen(wrapper, elClass, elHeader, data) {\n  const container = document.querySelector(`${wrapper}`);\n\n  const block = `\n    <ul class=\"${elClass}\">\n      <li style=\"font-weight: bold; font-size: 30px\">${elHeader}</li>\n      ${data.map(el => `<li style=\"padding: 5px 0;\">${el.name} | id: ${el.id}</li>`).join()}\n    </ul>\n  `;\n\n  container.insertAdjacentHTML('beforeend', block);\n}\n"]}